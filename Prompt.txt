这个项目需要创建一个网页，把我的outline wiki接入bge-m3向量模型和bge-reranker-m2 rerank模型和gpt5-chat模型，API为标准的OpenAI格式（使用硅基流动作为服务商），实现对wiki内容智能提问（RAG）。
我将通过docker新建一个页面以部署这个服务（端点为/chat）。
项目需要通过Outline Wiki的Webhook配置自动获取变更，或通过API手动拉取，分段chunk存储到本地数据库（使用支持向量的Postgres）。
所有模型都是通过API访问的，API地址和token通过环境变量配置。
Webhook端点为/chat/update/webhook。
手动拉取端点为/chat/update/all，当访问时直接全量刷新。
功能
- /chat: 前端页面
- POST /chat/api/ask: 进行 RAG 问答
- POST /chat/update/all: 手动全量拉取 Outline 文档并覆盖本地
- POST /chat/update/webhook: 接收 Outline Webhook 增量更新（签名方式阅读文档）
- OIDC客户端，通过GitLab OIDC实现认证与用户系统
- 按用户储存对话记录

前端页面需要包含：左侧为对话记录，右侧为与AI的对话框、右上角显示头像。点击头像显示菜单，包含登出和手动刷新按键。

需要输出完整的Python代码、dockerfile和docker compose
输出的docker compose中需要一并提供支持向量的Postgres的部署方式。Postgres用户名和密码等通过环境变量配置。

访问Outline Wiki文档了解Outline Wiki的Webhook方式和API结构。文档如下：
https://www.getoutline.com/developers
https://docs.getoutline.com/s/guide/doc/webhooks-gB7HYhS6yq
Webhook密钥通过环境变量配置。

以下为准备好的环境变量
# 应用
PORT=8080
VECTOR_DIM=1024

# Postgres
POSTGRES_DB=outline_rag
POSTGRES_USER=outline
POSTGRES_PASSWORD=outlinepass
POSTGRES_PORT=5432

# Outline
OUTLINE_API_URL=https://your-outline-domain.com
OUTLINE_API_TOKEN=your_outline_api_token
OUTLINE_WEBHOOK_SECRET=your_webhook_secret

# Models
EMBEDDING_API_URL=https://your-embedding-api
EMBEDDING_API_TOKEN=your_embedding_token
EMBEDDING_MODEL=bge-m3

RERANKER_API_URL=https://your-reranker-api
RERANKER_API_TOKEN=your_reranker_token
RERANKER_MODEL=bge-reranker-m2

CHAT_API_URL=https://your-chat-api
CHAT_API_TOKEN=your_chat_token
CHAT_MODEL=your-chat-model

# OAuth
GITLAB_CLIENT_ID=your_gitlab_client_id
GITLAB_CLIENT_SECRET=your_gitlab_client_secret
GITLAB_URL=https://your-gitlab-domain.com #需要自动拼接.well-known/openid-configuration

根据这些要求创建所有完整可用，可以直接启动的文件。